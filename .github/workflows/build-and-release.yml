name: Build and Release Piper TTS Electron

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: [self-hosted, linux]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Get version from tag or input
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Check if release already exists
      id: check_release
      run: |
        RELEASE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.version.outputs.version }}")
        
        if [ "$RELEASE_EXISTS" = "200" ]; then
          echo "Release ${{ steps.version.outputs.version }} already exists"
          echo "exists=true" >> $GITHUB_OUTPUT
          
          # Check if Windows executable already exists in the release
          ASSETS=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.version.outputs.version }}" | \
            jq -r '.assets[].name')
          
          if echo "$ASSETS" | grep -q "TTS-Electron.*\.exe\|.*Setup.*\.exe\|.*portable.*\.exe"; then
            echo "Windows executable already exists in release"
            echo "exe_exists=true" >> $GITHUB_OUTPUT
          else
            echo "exe_exists=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "exe_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Exit if executable already exists
      if: steps.check_release.outputs.exe_exists == 'true'
      run: |
        echo "Windows executable already exists in release ${{ steps.version.outputs.version }}. Exiting."
        exit 0

    - name: Verify Wine installation
      if: steps.check_release.outputs.exe_exists == 'false'
      run: |
        echo "Verifying Wine installation..."
        wine --version

    - name: Install dependencies
      if: steps.check_release.outputs.exe_exists == 'false'
      run: npm ci

    - name: Update version in package.json
      if: steps.check_release.outputs.exe_exists == 'false'
      run: |
        TARGET_VERSION="${{ steps.version.outputs.version_number }}"
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        
        echo "Current version: $CURRENT_VERSION"
        echo "Target version: $TARGET_VERSION"
        
        if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
          echo "Updating version from $CURRENT_VERSION to $TARGET_VERSION"
          npm version $TARGET_VERSION --no-git-tag-version
        else
          echo "Version is already $TARGET_VERSION, no update needed"
        fi

    - name: Verify required files exist
      if: steps.check_release.outputs.exe_exists == 'false'
      run: |
        echo "Checking required files..."
        ls -la
        
        # Check for icon file
        if [ ! -f "assets/icon.ico" ]; then
          echo "Warning: assets/icon.ico not found, creating placeholder"
          mkdir -p assets
          # Create a minimal ICO file (placeholder)
          echo -e "\x00\x00\x01\x00\x01\x00\x10\x10\x00\x00\x01\x00\x20\x00\x68\x04\x00\x00\x16\x00\x00\x00" > assets/icon.ico
        fi
        
        # Check for piper directory
        if [ ! -d "piper" ]; then
          echo "Warning: piper directory not found"
        else
          echo "Piper directory contents:"
          ls -la piper/
        fi
        
        # Check for FFmpeg files
        for file in ffmpeg.exe ffplay.exe ffprobe.exe; do
          if [ ! -f "$file" ]; then
            echo "Warning: $file not found"
          else
            echo "Found: $file ($(stat -c%s $file) bytes)"
          fi
        done

    - name: Initialize Wine environment
      if: steps.check_release.outputs.exe_exists == 'false'
      env:
        WINEARCH: win64
        WINEPREFIX: /tmp/wine64
      run: |
        echo "Initializing Wine environment..."
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x16 &
        sleep 2
        wineboot --init
        sleep 5

    - name: Build Windows executable
      if: steps.check_release.outputs.exe_exists == 'false'
      env:
        WINEARCH: win64
        WINEPREFIX: /tmp/wine64
        DISPLAY: :99
        CSC_IDENTITY_AUTO_DISCOVERY: false
      run: |
        echo "Building Windows executable with electron-builder..."
        
        # Set environment for cross-compilation
        export npm_config_target_platform=win32
        export npm_config_target_arch=x64
        export npm_config_disturl=https://electronjs.org/headers
        export npm_config_runtime=electron
        export npm_config_cache=/tmp/.npm
        export npm_config_build_from_source=true
        
        # Build for Windows
        npm run build
        
        # List built files
        echo "Built files in dist/:"
        find dist/ -type f -name "*.exe" -o -name "*.msi" -o -name "*.zip" | head -20

    - name: Find Windows executables
      if: steps.check_release.outputs.exe_exists == 'false'
      id: find_exe
      run: |
        echo "Searching for Windows executables..."
        
        # Find setup executable (installer)
        SETUP_EXE=$(find dist/ -name "*Setup*.exe" -o -name "*setup*.exe" | head -1)
        
        # Find portable executable
        PORTABLE_EXE=$(find dist/ -name "*portable*.exe" -o -name "*Portable*.exe" | head -1)
        
        # Find any other exe files
        OTHER_EXE=$(find dist/ -name "*.exe" | grep -v -i "setup\|portable\|uninstall" | head -1)
        
        if [ -n "$SETUP_EXE" ]; then
          echo "Found setup executable: $SETUP_EXE"
          echo "setup_exe_path=$SETUP_EXE" >> $GITHUB_OUTPUT
          echo "setup_exe_size=$(stat -c%s "$SETUP_EXE")" >> $GITHUB_OUTPUT
          echo "has_setup=true" >> $GITHUB_OUTPUT
        else
          echo "has_setup=false" >> $GITHUB_OUTPUT
        fi
        
        if [ -n "$PORTABLE_EXE" ]; then
          echo "Found portable executable: $PORTABLE_EXE"
          echo "portable_exe_path=$PORTABLE_EXE" >> $GITHUB_OUTPUT
          echo "portable_exe_size=$(stat -c%s "$PORTABLE_EXE")" >> $GITHUB_OUTPUT
          echo "has_portable=true" >> $GITHUB_OUTPUT
        else
          echo "has_portable=false" >> $GITHUB_OUTPUT
        fi
        
        if [ -n "$OTHER_EXE" ]; then
          echo "Found other executable: $OTHER_EXE"
          echo "other_exe_path=$OTHER_EXE" >> $GITHUB_OUTPUT
          echo "other_exe_size=$(stat -c%s "$OTHER_EXE")" >> $GITHUB_OUTPUT
          echo "has_other=true" >> $GITHUB_OUTPUT
        else
          echo "has_other=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if we found at least one executable
        if [ -z "$SETUP_EXE" ] && [ -z "$PORTABLE_EXE" ] && [ -z "$OTHER_EXE" ]; then
          echo "ERROR: No Windows executable files found!"
          echo "Contents of dist directory:"
          find dist/ -type f | head -20
          exit 1
        fi

    - name: Create or get release
      if: steps.check_release.outputs.exe_exists == 'false'
      id: create_release
      run: |
        VERSION_TAG="${{ steps.version.outputs.version }}"
        VERSION_NUM="${{ steps.version.outputs.version_number }}"
        
        echo "Checking if release $VERSION_TAG exists..."
        
        # Check if release exists (including drafts)
        RELEASE_DATA=$(curl -s \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$VERSION_TAG" 2>/dev/null)
        
        if echo "$RELEASE_DATA" | grep -q '"id"'; then
          echo "Release $VERSION_TAG already exists"
          RELEASE_ID=$(echo "$RELEASE_DATA" | jq -r '.id')
          UPLOAD_URL=$(echo "$RELEASE_DATA" | jq -r '.upload_url')
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
          echo "created_new=false" >> $GITHUB_OUTPUT
        else
          echo "Creating new draft release $VERSION_TAG..."
          
          # Create release body
          RELEASE_BODY="## Piper TTS Electron $VERSION_TAG

### 🎙️ Características
- ✅ Aplicación de escritorio para síntesis de voz con Piper TTS
- ✅ Soporte para modelos ONNX de alta calidad
- ✅ Interfaz moderna y fácil de usar
- ✅ Procesamiento paralelo para mejor rendimiento
- ✅ Soporte para múltiples idiomas y voces

### 📦 Archivos Disponibles
- **Setup**: Instalador completo con todas las dependencias
- **Portable**: Versión portable que no requiere instalación

### 🚀 Instalación

#### Instalador (Recomendado)
1. Descarga el archivo \`TTS-Electron-Setup-$VERSION_NUM.exe\`
2. Ejecuta el instalador como administrador
3. Sigue las instrucciones en pantalla
4. La aplicación se instalará con todos los componentes necesarios

#### Versión Portable
1. Descarga el archivo \`TTS-Electron-$VERSION_NUM-portable.exe\`
2. Ejecuta directamente sin instalación
3. Todos los archivos se mantienen en la carpeta de la aplicación

### 💻 Requisitos del Sistema
- Windows 10 o superior (64-bit)
- 2 GB de RAM mínimo (4 GB recomendado)
- 500 MB de espacio libre en disco
- Tarjeta de sonido compatible

### 🎯 Uso
1. Abre la aplicación
2. Selecciona la carpeta con tus modelos Piper TTS
3. Elige el modelo de voz deseado
4. Escribe o pega el texto a convertir
5. Ajusta la configuración de audio si es necesario
6. Haz clic en \"Generar Audio\"

### 🔧 Modelos TTS
Esta aplicación requiere modelos Piper TTS en formato ONNX. Puedes descargar modelos desde:
- [Repositorio oficial de Piper](https://github.com/rhasspy/piper)
- [Hugging Face - Modelos Piper](https://huggingface.co/rhasspy/piper-voices)

### 📝 Notas de la Versión
- Mejoras en el rendimiento de síntesis
- Correcciones de errores menores
- Interfaz optimizada

---

**Construido automáticamente el:** $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")  
**Commit:** ${{ github.sha }}  
**Plataforma:** Windows x64"
          
          # Create the release
          RELEASE_RESPONSE=$(curl -s \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d "{
              \"tag_name\": \"$VERSION_TAG\",
              \"name\": \"Piper TTS Electron $VERSION_TAG\",
              \"body\": $(echo "$RELEASE_BODY" | jq -Rs .),
              \"draft\": true,
              \"prerelease\": false
            }")
          
          if echo "$RELEASE_RESPONSE" | grep -q '"id"'; then
            RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
            UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.upload_url')
            echo "✅ Created draft release with ID: $RELEASE_ID"
            echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
            echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
            echo "created_new=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to create release"
            echo "$RELEASE_RESPONSE"
            exit 1
          fi
        fi

    - name: Publish release if new
      if: steps.check_release.outputs.exe_exists == 'false' && steps.create_release.outputs.created_new == 'true'
      run: |
        echo "Publishing draft release..."
        curl -s \
          -X PATCH \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.release_id }}" \
          -d '{"draft": false}' > /dev/null
        echo "✅ Release published successfully"

    - name: Upload Setup executable
      if: steps.check_release.outputs.exe_exists == 'false' && steps.find_exe.outputs.has_setup == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_exe.outputs.setup_exe_path }}
        asset_name: TTS-Electron-Setup-${{ steps.version.outputs.version_number }}.exe
        asset_content_type: application/octet-stream

    - name: Upload Portable executable
      if: steps.check_release.outputs.exe_exists == 'false' && steps.find_exe.outputs.has_portable == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_exe.outputs.portable_exe_path }}
        asset_name: TTS-Electron-${{ steps.version.outputs.version_number }}-portable.exe
        asset_content_type: application/octet-stream

    - name: Upload other executable (if no setup/portable found)
      if: steps.check_release.outputs.exe_exists == 'false' && steps.find_exe.outputs.has_other == 'true' && steps.find_exe.outputs.has_setup == 'false' && steps.find_exe.outputs.has_portable == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_exe.outputs.other_exe_path }}
        asset_name: TTS-Electron-${{ steps.version.outputs.version_number }}.exe
        asset_content_type: application/octet-stream

    - name: Create build summary
      if: steps.check_release.outputs.exe_exists == 'false'
      run: |
        echo "## 🎉 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Application:** Piper TTS Electron" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Generated Files:" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.find_exe.outputs.has_setup }}" = "true" ]; then
          echo "- ✅ **Setup Installer:** TTS-Electron-Setup-${{ steps.version.outputs.version_number }}.exe (${{ steps.find_exe.outputs.setup_exe_size }} bytes)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.find_exe.outputs.has_portable }}" = "true" ]; then
          echo "- ✅ **Portable Version:** TTS-Electron-${{ steps.version.outputs.version_number }}-portable.exe (${{ steps.find_exe.outputs.portable_exe_size }} bytes)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.find_exe.outputs.has_other }}" = "true" ] && [ "${{ steps.find_exe.outputs.has_setup }}" = "false" ] && [ "${{ steps.find_exe.outputs.has_portable }}" = "false" ]; then
          echo "- ✅ **Executable:** TTS-Electron-${{ steps.version.outputs.version_number }}.exe (${{ steps.find_exe.outputs.other_exe_size }} bytes)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Release URL:** https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Platform:** Windows x64" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Tool:** Electron Builder with Wine" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎙️ **Ready for TTS magic!** ✨" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      if: always()
      run: |
        echo "Cleaning up build artifacts and temporary files..."
        
        # Clean up build artifacts to save space
        rm -rf dist/ || true
        rm -rf node_modules/.cache || true
        rm -rf /tmp/wine64 || true
        
        # Kill any remaining Xvfb processes
        pkill Xvfb || true
        
        echo "Cleanup completed"

  notify-completion:
    needs: build-and-release
    runs-on: [self-hosted, linux]
    if: always()
    steps:
    - name: Notify build completion
      run: |
        if [ "${{ needs.build-and-release.result }}" = "success" ]; then
          echo "🎉 Piper TTS Electron build and release completed successfully!"
          echo "🎙️ Ready to synthesize speech with the latest version!"
        elif [ "${{ needs.build-and-release.result }}" = "skipped" ]; then
          echo "⏭️ Build was skipped (executable already exists in release)"
        else
          echo "❌ Build failed or encountered an error"
          echo "Check the logs above for details"
        fi