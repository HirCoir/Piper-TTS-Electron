name: Build and Release Piper TTS Electron

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: [self-hosted, linux]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Get version from tag or input
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Check if release already exists
      id: check_release
      run: |
        RELEASE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.version.outputs.version }}")
        
        if [ "$RELEASE_EXISTS" = "200" ]; then
          echo "Release ${{ steps.version.outputs.version }} already exists"
          echo "exists=true" >> $GITHUB_OUTPUT
          
          # Check if Windows executable already exists in the release
          ASSETS=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.version.outputs.version }}" | \
            jq -r '.assets[].name')
          
          if echo "$ASSETS" | grep -q "TTS-Electron.*\.exe\|.*Setup.*\.exe\|.*portable.*\.exe"; then
            echo "Windows executable already exists in release"
            echo "exe_exists=true" >> $GITHUB_OUTPUT
          else
            echo "exe_exists=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "exe_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Exit if executable already exists
      if: steps.check_release.outputs.exe_exists == 'true'
      run: |
        echo "Windows executable already exists in release ${{ steps.version.outputs.version }}. Exiting."
        exit 0

    - name: Verify Wine installation
      if: steps.check_release.outputs.exe_exists == 'false'
      run: |
        echo "Verifying Wine installation..."
        wine --version

    - name: Install dependencies
      if: steps.check_release.outputs.exe_exists == 'false'
      run: npm ci

    - name: Update version in package.json
      if: steps.check_release.outputs.exe_exists == 'false'
      run: |
        TARGET_VERSION="${{ steps.version.outputs.version_number }}"
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        
        echo "Current version: $CURRENT_VERSION"
        echo "Target version: $TARGET_VERSION"
        
        if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
          echo "Updating version from $CURRENT_VERSION to $TARGET_VERSION"
          npm version $TARGET_VERSION --no-git-tag-version
        else
          echo "Version is already $TARGET_VERSION, no update needed"
        fi

    - name: Verify required files exist
      if: steps.check_release.outputs.exe_exists == 'false'
      run: |
        echo "Checking required files..."
        ls -la
        
        # Check for icon file
        if [ ! -f "assets/icon.ico" ]; then
          echo "Warning: assets/icon.ico not found, creating placeholder"
          mkdir -p assets
          # Create a minimal ICO file (placeholder)
          echo -e "\x00\x00\x01\x00\x01\x00\x10\x10\x00\x00\x01\x00\x20\x00\x68\x04\x00\x00\x16\x00\x00\x00" > assets/icon.ico
        fi
        
        # Check for piper directory
        if [ ! -d "piper" ]; then
          echo "Warning: piper directory not found"
        else
          echo "Piper directory contents:"
          ls -la piper/
        fi
        
        # Check for FFmpeg files
        for file in ffmpeg.exe ffplay.exe ffprobe.exe; do
          if [ ! -f "$file" ]; then
            echo "Warning: $file not found"
          else
            echo "Found: $file ($(stat -c%s $file) bytes)"
          fi
        done

    - name: Initialize Wine environment
      if: steps.check_release.outputs.exe_exists == 'false'
      env:
        WINEARCH: win64
        WINEPREFIX: ${{ runner.temp }}/wine64
      run: |
        echo "Initializing Wine environment..."

        # Clean up any previous Wine prefix to ensure a fresh start
        echo "Removing old WINEPREFIX if it exists..."
        rm -rf "${{ env.WINEPREFIX }}"
        
        # Create Wine prefix directory
        mkdir -p "${{ env.WINEPREFIX }}"
        
        # Kill any existing Xvfb processes
        pkill Xvfb || true
        
        # Start Xvfb and wait for it to be ready
        echo "Starting Xvfb..."
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x16 -ac +extension GLX +render -noreset &
        XVFB_PID=$!
        sleep 5 # Increased sleep time
        
        # Verify Xvfb is running
        if ! ps -p $XVFB_PID > /dev/null; then
          echo "Failed to start Xvfb"
          exit 1
        fi
        echo "Xvfb started successfully with PID: $XVFB_PID"
        
        # Initialize Wine. This can take some time.
        echo "Initializing Wine with prefix: ${{ env.WINEPREFIX }}"
        # The timeout command prevents this step from hanging indefinitely (e.g., for 120 seconds)
        timeout 120 wineboot --init
        
        # Verify Wine installation again after init
        echo "Verifying Wine version after initialization..."
        wine --version
        echo "Wine environment initialized successfully"

    - name: Build Windows executable
      if: steps.check_release.outputs.exe_exists == 'false'
      env:
        WINEARCH: win64
        WINEPREFIX: ${{ runner.temp }}/wine64
        DISPLAY: :99
        CSC_IDENTITY_AUTO_DISCOVERY: false
      run: |
        echo "Building Windows executable with electron-builder..."
        
        # Set environment for cross-compilation
        export npm_config_target_platform=win32
        export npm_config_target_arch=x64
        export npm_config_disturl=https://electronjs.org/headers
        export npm_config_runtime=electron
        export npm_config_cache=${{ runner.temp }}/.npm
        export npm_config_build_from_source=true
        
        # Ensure Xvfb is still running
        if ! pgrep Xvfb > /dev/null; then
          echo "Restarting Xvfb..."
          Xvfb :99 -screen 0 1024x768x16 -ac +extension GLX +render -noreset &
          sleep 3
        fi
        
        # Build for Windows
        npm run build
        
        # List built files
        echo "Built files in dist/:"
        find dist/ -type f -name "*.exe" -o -name "*.msi" -o -name "*.zip" | head -20

    - name: Find Windows executables
      if: steps.check_release.outputs.exe_exists == 'false'
      id: find_exe
      run: |
        echo "Searching for Windows executables..."
        
        # Find setup executable (installer)
        SETUP_EXE=$(find dist/ -name "*Setup*.exe" -o -name "*setup*.exe" | head -1)
        
        # Find portable executable
        PORTABLE_EXE=$(find dist/ -name "*portable*.exe" -o -name "*Portable*.exe" | head -1)
        
        # Find any other exe files
        OTHER_EXE=$(find dist/ -name "*.exe" | grep -v -i "setup\|portable\|uninstall" | head -1)
        
        if [ -n "$SETUP_EXE" ]; then
          echo "Found setup executable: $SETUP_EXE"
          echo "setup_exe_path=$SETUP_EXE" >> $GITHUB_OUTPUT
          echo "setup_exe_size=$(stat -c%s "$SETUP_EXE")" >> $GITHUB_OUTPUT
          echo "has_setup=true" >> $GITHUB_OUTPUT
        else
          echo "has_setup=false" >> $GITHUB_OUTPUT
        fi
        
        if [ -n "$PORTABLE_EXE" ]; then
          echo "Found portable executable: $PORTABLE_EXE"
          echo "portable_exe_path=$PORTABLE_EXE" >> $GITHUB_OUTPUT
          echo "portable_exe_size=$(stat -c%s "$PORTABLE_EXE")" >> $GITHUB_OUTPUT
          echo "has_portable=true" >> $GITHUB_OUTPUT
        else
          echo "has_portable=false" >> $GITHUB_OUTPUT
        fi
        
        if [ -n "$OTHER_EXE" ]; then
          echo "Found other executable: $OTHER_EXE"
          echo "other_exe_path=$OTHER_EXE" >> $GITHUB_OUTPUT
          echo "other_exe_size=$(stat -c%s "$OTHER_EXE")" >> $GITHUB_OUTPUT
          echo "has_other=true" >> $GITHUB_OUTPUT
        else
          echo "has_other=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if we found at least one executable
        if [ -z "$SETUP_EXE" ] && [ -z "$PORTABLE_EXE" ] && [ -z "$OTHER_EXE" ]; then
          echo "ERROR: No Windows executable files found!"
          echo "Contents of dist directory:"
          find dist/ -type f | head -20
          exit 1
        fi

    - name: Create or get release
      if: steps.check_release.outputs.exe_exists == 'false'
      id: create_release
      run: |
        # Check if release exists (including drafts)
        RELEASE_DATA=$(curl -s \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.version.outputs.version }}")
        
        if echo "$RELEASE_DATA" | jq -e '.id' > /dev/null 2>&1; then
          echo "Release already exists, getting upload URL..."
          UPLOAD_URL=$(echo "$RELEASE_DATA" | jq -r '.upload_url')
          RELEASE_ID=$(echo "$RELEASE_DATA" | jq -r '.id')
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
          echo "created_new=false" >> $GITHUB_OUTPUT
        else
          echo "Creating new draft release..."
          
          # Create release body with current timestamp
          CURRENT_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          RELEASE_RESPONSE=$(curl -s \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d '{
              "tag_name": "${{ steps.version.outputs.version }}",
              "name": "Piper TTS Electron ${{ steps.version.outputs.version }}",
              "body": "## Piper TTS Electron ${{ steps.version.outputs.version }}\n\n### 🎙️ Características\n- ✅ Aplicación de escritorio para síntesis de voz con Piper TTS\n- ✅ Soporte para modelos ONNX de alta calidad\n- ✅ Interfaz moderna y fácil de usar\n- ✅ Procesamiento paralelo para mejor rendimiento\n- ✅ Soporte para múltiples idiomas y voces\n\n### 📦 Archivos Disponibles\n- **Setup**: Instalador completo con todas las dependencias\n- **Portable**: Versión portable que no requiere instalación\n\n### 🚀 Instalación\n\n#### Instalador (Recomendado)\n1. Descarga el archivo `TTS-Electron-Setup-${{ steps.version.outputs.version_number }}.exe`\n2. Ejecuta el instalador como administrador\n3. Sigue las instrucciones en pantalla\n4. La aplicación se instalará con todos los componentes necesarios\n\n#### Versión Portable\n1. Descarga el archivo `TTS-Electron-${{ steps.version.outputs.version_number }}-portable.exe`\n2. Ejecuta directamente sin instalación\n3. Todos los archivos se mantienen en la carpeta de la aplicación\n\n### 💻 Requisitos del Sistema\n- Windows 10 o superior (64-bit)\n- 2 GB de RAM mínimo (4 GB recomendado)\n- 500 MB de espacio libre en disco\n- Tarjeta de sonido compatible\n\n### 🎯 Uso\n1. Abre la aplicación\n2. Selecciona la carpeta con tus modelos Piper TTS\n3. Elige el modelo de voz deseado\n4. Escribe o pega el texto a convertir\n5. Ajusta la configuración de audio si es necesario\n6. Haz clic en \"Generar Audio\"\n\n### 🔧 Modelos TTS\nEsta aplicación requiere modelos Piper TTS en formato ONNX. Puedes descargar modelos desde:\n- [Repositorio oficial de Piper](https://github.com/rhasspy/piper)\n- [Hugging Face - Modelos Piper](https://huggingface.co/rhasspy/piper-voices)\n\n### 📝 Notas de la Versión\n- Mejoras en el rendimiento de síntesis\n- Correcciones de errores menores\n- Interfaz optimizada\n\n---\n\n**Construido automáticamente el:** '"$CURRENT_TIME"'\n**Commit:** ${{ github.sha }}\n**Plataforma:** Windows x64",
              "draft": true,
              "prerelease": false
            }')
          
          UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.upload_url')
          RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
          
          if [ "$UPLOAD_URL" = "null" ] || [ "$RELEASE_ID" = "null" ]; then
            echo "Error creating release:"
            echo "$RELEASE_RESPONSE"
            exit 1
          fi
          
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
          echo "created_new=true" >> $GITHUB_OUTPUT
          echo "Created draft release with ID: $RELEASE_ID"
        fi

    - name: Publish release (make it public)
      if: steps.check_release.outputs.exe_exists == 'false' && steps.create_release.outputs.created_new == 'true'
      run: |
        echo "Publishing draft release..."
        curl -s \
          -X PATCH \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.release_id }}" \
          -d '{"draft": false}'
        echo "Release published successfully!"

    - name: Upload Setup executable
      if: steps.check_release.outputs.exe_exists == 'false' && steps.find_exe.outputs.has_setup == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_exe.outputs.setup_exe_path }}
        asset_name: TTS-Electron-Setup-${{ steps.version.outputs.version_number }}.exe
        asset_content_type: application/octet-stream

    - name: Upload Portable executable
      if: steps.check_release.outputs.exe_exists == 'false' && steps.find_exe.outputs.has_portable == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_exe.outputs.portable_exe_path }}
        asset_name: TTS-Electron-${{ steps.version.outputs.version_number }}-portable.exe
        asset_content_type: application/octet-stream

    - name: Upload other executable (if no setup/portable found)
      if: steps.check_release.outputs.exe_exists == 'false' && steps.find_exe.outputs.has_other == 'true' && steps.find_exe.outputs.has_setup == 'false' && steps.find_exe.outputs.has_portable == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_exe.outputs.other_exe_path }}
        asset_name: TTS-Electron-${{ steps.version.outputs.version_number }}.exe
        asset_content_type: application/octet-stream

    - name: Create build summary
      if: steps.check_release.outputs.exe_exists == 'false'
      run: |
        echo "## 🎉 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Application:** Piper TTS Electron" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Generated Files:" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.find_exe.outputs.has_setup }}" = "true" ]; then
          echo "- ✅ **Setup Installer:** TTS-Electron-Setup-${{ steps.version.outputs.version_number }}.exe (${{ steps.find_exe.outputs.setup_exe_size }} bytes)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.find_exe.outputs.has_portable }}" = "true" ]; then
          echo "- ✅ **Portable Version:** TTS-Electron-${{ steps.version.outputs.version_number }}-portable.exe (${{ steps.find_exe.outputs.portable_exe_size }} bytes)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.find_exe.outputs.has_other }}" = "true" ] && [ "${{ steps.find_exe.outputs.has_setup }}" = "false" ] && [ "${{ steps.find_exe.outputs.has_portable }}" = "false" ]; then
          echo "- ✅ **Executable:** TTS-Electron-${{ steps.version.outputs.version_number }}.exe (${{ steps.find_exe.outputs.other_exe_size }} bytes)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Release URL:** https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Platform:** Windows x64" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Tool:** Electron Builder with Wine" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎙️ **Ready for TTS magic!** ✨" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      if: always()
      run: |
        echo "Cleaning up build artifacts and temporary files..."
        
        # Clean up build artifacts to save space
        rm -rf dist/ || true
        rm -rf node_modules/.cache || true
        rm -rf "${{ runner.temp }}/wine64" || true
        rm -rf "${{ runner.temp }}/.npm" || true
        
        # Kill any remaining Xvfb processes
        pkill Xvfb || true
        
        echo "Cleanup completed"

  notify-completion:
    needs: build-and-release
    runs-on: [self-hosted, linux]
    if: always()
    steps:
    - name: Notify build completion
      run: |
        if [ "${{ needs.build-and-release.result }}" = "success" ]; then
          echo "🎉 Piper TTS Electron build and release completed successfully!"
          echo "🎙️ Ready to synthesize speech with the latest version!"
        elif [ "${{ needs.build-and-release.result }}" = "skipped" ]; then
          echo "⏭️ Build was skipped (executable already exists in release)"
        else
          echo "❌ Build failed or encountered an error"
          echo "Check the logs above for details"
        fi