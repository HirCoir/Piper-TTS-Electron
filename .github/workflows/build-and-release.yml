name: Build and Release Electron App

on:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: [self-hosted, linux]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Get version from release
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          VERSION="v1.0.0"  # Default for manual dispatch
        fi
        
        # Extract version number and ensure it's in x.y.z format
        VERSION_NUMBER=${VERSION#v}
        
        # If version is only x.y, add .0 to make it x.y.z
        if [[ $VERSION_NUMBER =~ ^[0-9]+\.[0-9]+$ ]]; then
          VERSION_NUMBER="${VERSION_NUMBER}.0"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT

    - name: Install dependencies
      run: npm ci

    - name: Update version in package.json
      run: |
        TARGET_VERSION="${{ steps.version.outputs.version_number }}"
        echo "Setting version to: $TARGET_VERSION"
        
        # Use sed to directly update the version in package.json
        sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$TARGET_VERSION\"/" package.json
        
        # Verify the change
        echo "Updated version:"
        grep '"version":' package.json

    - name: Create icon file if missing
      run: |
        if [ ! -f "assets/icon.ico" ]; then
          mkdir -p assets
          convert -size 256x256 xc:transparent assets/icon.ico || echo "Warning: Could not create icon file"
        fi

    - name: Build Windows executable
      run: |
        npx electron-builder --win --x64 --publish=never

    - name: Package unpacked folder
      run: |
        cd dist && \
        if [ -d "win-unpacked" ]; then
          tar -czf tts-electron_unpacked.tar.gz win-unpacked/
        fi

    - name: Upload to release
      if: github.event_name == 'release'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Upload portable executable(s) without compression
        for exe in dist/*.exe; do
          if [ -f "$exe" ]; then
            gh release upload ${{ github.event.release.tag_name }} "$exe" --clobber --repo ${{ github.repository }}
          fi
        done
        
        # Upload unpacked folder if it exists
        if [ -f "dist/tts-electron_unpacked.tar.gz" ]; then
          gh release upload ${{ github.event.release.tag_name }} dist/tts-electron_unpacked.tar.gz --clobber --repo ${{ github.repository }}
        fi

    - name: Cleanup build artifacts
      if: always()
      run: |
        echo "Cleaning up build artifacts..."
        rm -rf dist/ || true
        rm -rf node_modules/.cache/ || true
        rm -rf ~/.cache/electron/ || true
        rm -rf ~/.cache/electron-builder/ || true
        rm -rf /tmp/electron-* || true
        echo "Cleanup completed - runner is clean for next job"